unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
select(hmid, score)
View(yike)
?summarise
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
summarise(sent_score = mean(score))
View(yike)
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutatae(sent_score = mean(score))
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score))
View(yike)
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
View(yike)
View(text_data)
?str_c
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(text = str_c(word, collapse = " "), sent_score = mean(score)) %>%
select(-score, -id)
View(yike)
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(text = str_c(word, collapse = " "), sent_score = mean(score)) %>%
select(-score, -id, -word)
View(yike)
yike <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
View(yike)
fam_sentiment <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
View(text_sentiment)
summary(text_sentiment$sent_score)
summary(fam_sentiment$sent_score)
demo_data <-read.csv("demographic.csv")
getwd()
demo_data <-read.csv("demographic.csv")
##filter on presence of family word
fam_data <- text_data %>%
filter(text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason")) %>%
inner_join(demo_data, by="wid")
View(fam_data)
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word and join to demographic data
fam_data <- text_data %>%
filter(text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
View(fam_data)
fam_sentiment <- fam_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
#descriptive statisitics
##denominator functions
div_text <- function(x){
(x/nrow(text_data)) *100
}
div_fam <- function(x){
(x/nrow(fam_data)) *100
}
(nrow(fam_data) / nrow(text_data)) * 100 #percentage of moments that are family-oriented
##breakdown of moment cateogry by family-oriented versus all
sapply(summary(as.factor(text_data$predicted_category)), div_text)
sapply(summary(as.factor(fam_data$predicted_category)), div_fam)
#sentiment averages family versus all
summary(text_sentiment$sent_score)
summary(fam_sentiment$sent_score)
summary(fam_data$gender)
sapply(summary(as.factor(fam_data$gender)), div_fam)
sapply(summary(as.factor(fam_sentiment$gender)), div_fam)
#descriptive statisitics
##denominator functions
div_text <- function(x){
(x/nrow(text_sentiment)) *100
}
div_fam <- function(x){
(x/nrow(fam_sentiment)) *100
}
(nrow(fam_data) / nrow(text_data)) * 100 #percentage of moments that are family-oriented
##breakdown of moment cateogry by family-oriented versus all
sapply(summary(as.factor(text_data$predicted_category)), div_text)
sapply(summary(as.factor(fam_data$predicted_category)), div_fam)
##breakdown of moment cateogry by family-oriented versus all
sapply(summary(as.factor(text_sentiment$predicted_category)), div_text)
sapply(summary(as.factor(fam_sentiment$predicted_category)), div_fam)
#sentiment averages family versus all
summary(text_sentiment$sent_score)
summary(fam_sentiment$sent_score)
sapply(summary(as.factor(fam_sentiment$gender)), div_fam)
View(demo_data)
sapply(summary(as.factor(fam_sentiment$marital)), div_fam)
sapply(summary(as.factor(text_sentiment$gender)), div_text)
sapply(summary(as.factor(text_sentiment$marital)), div_text)
sapply(summary(as.factor(fam_sentiment$marital)), div_fam)
##
sapply(summary(as.factor(fam_sentiment$parenthood)), div_fam)
sapply(summary(as.factor(text_sentiment$parenthood)), div_text)
?mutate
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|"))
View(text_data)
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
##calculate sentiment score
##tokenize and compare using join with AFINN lexicon
sentiment <- get_sentiments("afinn")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|"))
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
#descriptive statisitics
##denominator functions
div_text <- function(x){
(x/nrow(text_sentiment)) *100
}
div_fam <- function(x){
(x/nrow(text_sentiment[text_sentiment$is_fam])) *100
}
(nrow(text_sentiment[text_sentiment$is_fam]) / nrow(text_sentiment)) * 100 #percentage of moments that are family-oriented
nrow(text_sentiment[text_sentiment$is_fam]
)
text_sentiment[text_sentiment$is_fam]
(text_sentiment[text_sentiment$is_fam==T])
text_sentiment[text_sentiment$is_fam==T]
(text_sentiment[text_sentiment$is_fam = T]
text_sentiment[text_sentiment$is_fam = TRUE]
text_sentiment[text_sentiment$is_fam == TRUE]
text_sentiment[text_sentiment$is_fam]
text_sentiment[is_fam]
text_sentiment$is_fam
text_sentiment$is_fam[is_fam == F]
text_sentiment$is_fam[text_sentiment$is_fam == F]
text_sentiment[text_sentiment$is_fam == F]
text_sentiment[text_sentiment$is_fam]
text_sentiment[text_sentiment$is_fam == FALSE]
fam_sentiment <- text_sentiment %>%
filter(is_fam == T)
(nrow(fam_sentiment) / nrow(text_sentiment)) * 100 #percentage of moments that are family-oriented
##breakdown of moment cateogry by family-oriented versus all
sapply(summary(as.factor(text_sentiment$predicted_category)), div_text)
sapply(summary(as.factor(fam_sentiment$predicted_category)), div_fam)
div_fam <- function(x){
(x/nrow(fam_sentiment)) *100
}
sapply(summary(as.factor(fam_sentiment$predicted_category)), div_fam)
#sentiment averages family versus all
summary(text_sentiment$sent_score)
summary(fam_sentiment$sent_score)
#who mentions family?
###women do
sapply(summary(as.factor(fam_sentiment$gender)), div_fam)
sapply(summary(as.factor(text_sentiment$gender)), div_text)
##those are married or separated
sapply(summary(as.factor(fam_sentiment$marital)), div_fam)
sapply(summary(as.factor(text_sentiment$marital)), div_text)
##parents do
sapply(summary(as.factor(fam_sentiment$parenthood)), div_fam)
sapply(summary(as.factor(text_sentiment$parenthood)), div_text)
##contingency table of demo characteristics
table(text_sentiment$is_fam, text_sentiment$sent_score)
hist(text_sentiment$sent_score)
?Kruskal-Wallis test
?kruskal.test()
kruskal.test(sent_score ~ is_fam, text_sentiment)
##contingency table of demo characteristics
table(text_sentiment$is_fam, text_sentiment$sent_score)
##contingency table of demo characteristics
table(text_sentiment$is_fam, text_sentiment$gender)
##contingency table of demo characteristics
table(text_sentiment$is_fam, text_sentiment$gender, text_sentiment$parenthood)
##contingency table of demo characteristics
table(fam_sentiment$gender, fam_sentiment$parenthood)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son")
View(demo_data)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers", is_mom = "mama
mom|momma|mommies|mommy|moms|mother|mother-in-law|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters", is_spouse = "fiance|fiancee|fiancé|fiancée|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
View(fam_sentiment)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers", is_mom = "mama
mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters", is_spouse = "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = "mama|mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = "mama|mom", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = cleaned_hm %like%  "mama|mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = cleaned_hm %like% "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
summary(fam_sentiment$parenthood[fam_sentiment$gender == "f"])
?mean
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender = "f", parenthood = "y") %>%
summarise(avg_son = mean(sent_score[is_son ==T]))
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = mean(sent_score[is_son ==T]))
avg_mom
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = median(sent_score[is_son ==T]))
avg_mom
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = median(sent_score[is_son ==T]), c_son = n(is_son ==T), avg_d = median(sent_score[is_daughter ==T]))
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = median(sent_score[is_son ==T]), c_son = count(is_son ==T), avg_d = median(sent_score[is_daughter ==T]))
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = median(sent_score[is_son ==T]), c_son = nrow(is_son ==T), avg_d = median(sent_score[is_daughter ==T]))
##contingency table of demo characteristics
avg_mom <- fam_sentiment %>%
filter(gender == "f", parenthood == "y") %>%
summarise(avg_son = median(sent_score[is_son ==T]), avg_d = median(sent_score[is_daughter ==T]), avg_spouse = median(sent_score[is_spouse ==T]))
avg_mom
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
sentiment <- get_sentiments("afinn")
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
sentiment <- get_sentiments("afinn")
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = cleaned_hm %like%  "mama|mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = cleaned_hm %like% "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
plot(pressure)
install.packages("wordcloud2")
install.packages(DT)
install.packages("DT", "scales", "gridExtra", "ngram", "shiny")
install.packages("DT", "scales", "gridExtra", "ngram", "shiny")
install.packages("DT")
install.packages("scales")
install.packages("gridExtra")
install.packages("ngram")
install.packages("shiny")
library(tidytext)
library(dplyr)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
library(tidytext)
library(dplyr)
library(tidytext)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
knitr::opts_chunk$set(echo = TRUE)
library(tidytext)
library(dplyr)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##join demographic data
text_data <- text_data %>%
inner_join(demo_data, by="wid")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidytext)
library(dplyr)
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
plot(pressure)
library(tidytext)
library(dplyr)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
library(tidytext)
library(dplyr)
library(data.table)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
plot(pressure)
library(tidytext)
library(dplyr)
library(data.table)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
plot(pressure)
library(tidytext)
library(dplyr)
library(data.table)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
##calculate sentiment score
##tokenize and compare using join with AFINN lexicon
sentiment <- get_sentiments("afinn")
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
plot(pressure)
library(tidytext)
library(dplyr)
library(data.table)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
text_data <- text_data %>%
inner_join(demo_data, by="wid")
##filter on presence of family word
text_data <- text_data %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
##calculate sentiment score
##tokenize and compare using join with AFINN lexicon
sentiment <- get_sentiments("afinn")
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = cleaned_hm %like%  "mama|mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = cleaned_hm %like% "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
plot(pressure)
library(tidytext)
library(dplyr)
library(data.table)
##join demographic data
text_data <- read.csv("processed_moments.csv", stringsAsFactors = F)
topic_data <- readLines("family-dict.csv") #read in provided list of family words
demo_data <-read.csv("demographic.csv")
##filter on presence of family word
text_data <- text_data %>%
inner_join(demo_data, by="wid") %>%
mutate(is_fam = text %like% paste(topic_data, sep="_", collapse = "|")) %>%
filter(!text %like% c("person|song|reason"))
##calculate sentiment score
##tokenize and compare using join with AFINN lexicon
sentiment <- get_sentiments("afinn")
text_sentiment <- text_data %>%
unnest_tokens(word, text) %>%
inner_join(sentiment) %>%
group_by(hmid) %>%
mutate(sent_score = mean(score)) %>%
select(-score, -id, -word)
fam_sentiment <- text_sentiment %>%
filter(is_fam == T) %>%
mutate(is_son = cleaned_hm %like% "son", is_dad=cleaned_hm %like% "dad|daddy|dads|father|father-in-law|fathers",
is_mom = cleaned_hm %like%  "mama|mom|momma|mommies|mommy|moms|mother|mothers|mum|mummy|mums", is_daughter = cleaned_hm %like% "daughter|daughter-in-law|daughters",
is_spouse = cleaned_hm %like% "fiance|fiancee|hubby|husband|ex-husband|ex-wife|wife|husbands|wives|boyfriends|spouses|spouse")
plot(pressure)
